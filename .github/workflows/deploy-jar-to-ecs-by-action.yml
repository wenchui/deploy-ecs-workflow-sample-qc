name: "commit-master"

on:
  push:
    branches: 
    - 'master'

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
  CURRENT_DATE: ''
  ipaddr: ${ip_address}
  REGIONID: ${region_id} 
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check Out 
      uses: actions/checkout@v2

    - name: check env set and output
      run: |
        echo "##[set-env name=CURRENT_DATE;]$(date +%Y-%m-%d-%H-%M-%S)"
        echo ${{ env.CURRENT_DATE }}
        
    - name: Set up JDK 1.8 for maven build
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    # 完成java项目打包
    - name: build maven project
      run: mvn clean -U package -Dmaven.test.skip 

    # 上传当前版本到OBS中归档，需要提前准备OBS的AK/SK,并在github项目添加ACCESSKEY和SECRETACCESSKEY两个secrets
    - name: Upload To Huawei OBS
      uses: huaweicloud/obs-helper@v1.0.0
      id: upload_file_to_obs
      with:
        access_key: ${{ secrets.ACCESSKEY }}
        secret_key: ${{ secrets.SECRETACCESSKEY }}
        region: ${{ env.REGIONID }}
        bucket_name: bucket-test
        operation_type: upload
        local_file_path: target/demoapp.jar
        obs_file_path: workflow/springboot-web/v1.0.0.1/


    # 检查并安装jdk,当前demo需要安装jdk1.8,高版本可能不兼容,初始化系统是需要，如果不需要可以跳过
    - name: install jdk
      uses: huaweicloud/ssh-remote-action@v1.0.0
      with:
        ipaddr: ${{ env.ipaddr }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        commands: |
          yum install -y java-1.8.0-openjdk  java-1.8.0-openjdk-devel

    # 停止服务并备份老版本,初次部署可以跳过
    - name: backup app and service file
      uses: huaweicloud/ssh-remote-action@v1.0.0
      with:
        ipaddr: ${{ env.ipaddr }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        commands: |
          systemctl stop demoapp.service
          mkdir -p /opt/backup/demoapp/${{ env.CURRENT_DATE }}
          mv /usr/local/demoapp.jar /opt/backup/demoapp/${{ env.CURRENT_DATE }}
          cp /usr/local/start-demoapp.sh /opt/backup/demoapp/${{ env.CURRENT_DATE }}
          cp /usr/local/stop-demoapp.sh /opt/backup/demoapp/${{ env.CURRENT_DATE }}
          cp /etc/systemd/system/demoapp.service /opt/backup/demoapp/${{ env.CURRENT_DATE }}
          ls -la /opt/backup/demoapp/${{ env.CURRENT_DATE }}

    # 部署服务 部署jar包，并添加到systemctl 服务器中，方便启停
    - name: upload local file to remote server,deploy service
      uses: huaweicloud/scp-remote-action@v1.0.0
      with:
        ipaddr: ${{ env.ipaddr }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        operation_type: upload
        operation_list: |
          file target/demoapp.jar /usr/local/
          file bin/demoapp.service /etc/systemd/system/
          file bin/start-demoapp.sh /usr/local/
          file bin/stop-demoapp.sh /usr/local/

    # 修改文件权限并启动服务
    - name: chage file mode to 755 and startup service
      uses: huaweicloud/ssh-remote-action@v1.0.0
      with:
        ipaddr: ${{ env.ipaddr }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        commands: |
          chmod 755 /usr/local/start-demoapp.sh
          systemctl daemon-reload
          chmod 755 /usr/local/stop-demoapp.sh
          systemctl start demoapp.service

    # 检测前端页面和后端接口是否都能正常访问
    - name: check web app status
      run: |
        sleep 30
        curl -kv http://${{ env.ipaddr }}:8080/

    # 如果部署失败，可以通过如下方式回滚,初次部署不适用
#    - name: Rollback app and service files
#      uses: huaweicloud/ssh-remote-action@v1.2
#      with:
#        ipaddr: ${{ env.ipaddr }}
#        username: ${{ secrets.USERNAME }}
#        password: ${{ secrets.PASSWORD }}
#        commands: |
#          systemctl stop demoapp.service
#          rm -rf /usr/local/demoapp.jar
#          rm -rf /usr/local/start-demoapp.sh
#          rm -rf /usr/local/stop-demoapp.sh
#          rm -rf /etc/systemd/system/demoapp.service
#          cp /opt/backup/demoapp/${{ env.CURRENT_DATE }}/demoapp.jar /usr/local/demoapp.jar
#          cp /opt/backup/demoapp/${{ env.CURRENT_DATE }}/start-demoapp.sh /usr/local/start-demoapp.sh
#          cp /opt/backup/demoapp/${{ env.CURRENT_DATE }}/stop-demoapp.sh /usr/local/stop-demoapp.sh
#          cp /opt/backup/demoapp/${{ env.CURRENT_DATE }}/demoapp.service /etc/systemd/system/demoapp.service
#          systemctl daemon-reload
#          systemctl start demoapp.service
